
sevenSegmentDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000053e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000370  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  7a:	0c 94 9d 02 	jmp	0x53a	; 0x53a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_digit>:
	PORTA = 0;
}

void change_number(){
		
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	80 81       	ld	r24, Z
  92:	8a e3       	ldi	r24, 0x3A	; 58
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
  9c:	8b e3       	ldi	r24, 0x3B	; 59
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
  a4:	00 00       	nop
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <display_digit>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <display_digit+0x6>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	8b e3       	ldi	r24, 0x3B	; 59
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2b e3       	ldi	r18, 0x3B	; 59
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	40 81       	ld	r20, Z
  c6:	29 81       	ldd	r18, Y+1	; 0x01
  c8:	3a 81       	ldd	r19, Y+2	; 0x02
  ca:	20 5a       	subi	r18, 0xA0	; 160
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	24 2b       	or	r18, r20
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	00 00       	nop
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <clear_digit>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	8b e3       	ldi	r24, 0x3B	; 59
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	10 82       	st	Z, r1
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	6e 97       	sbiw	r28, 0x1e	; 30
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	init_digit();
 110:	0e 94 41 00 	call	0x82	; 0x82 <init_digit>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	aa e7       	ldi	r26, 0x7A	; 122
 11a:	b4 e4       	ldi	r27, 0x44	; 68
 11c:	8f 83       	std	Y+7, r24	; 0x07
 11e:	98 87       	std	Y+8, r25	; 0x08
 120:	a9 87       	std	Y+9, r26	; 0x09
 122:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 124:	26 e6       	ldi	r18, 0x66	; 102
 126:	36 e6       	ldi	r19, 0x66	; 102
 128:	46 e6       	ldi	r20, 0x66	; 102
 12a:	55 e4       	ldi	r21, 0x45	; 69
 12c:	6f 81       	ldd	r22, Y+7	; 0x07
 12e:	78 85       	ldd	r23, Y+8	; 0x08
 130:	89 85       	ldd	r24, Y+9	; 0x09
 132:	9a 85       	ldd	r25, Y+10	; 0x0a
 134:	0e 94 08 02 	call	0x410	; 0x410 <__mulsf3>
 138:	dc 01       	movw	r26, r24
 13a:	cb 01       	movw	r24, r22
 13c:	8b 87       	std	Y+11, r24	; 0x0b
 13e:	9c 87       	std	Y+12, r25	; 0x0c
 140:	ad 87       	std	Y+13, r26	; 0x0d
 142:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e8       	ldi	r20, 0x80	; 128
 14a:	5f e3       	ldi	r21, 0x3F	; 63
 14c:	6b 85       	ldd	r22, Y+11	; 0x0b
 14e:	7c 85       	ldd	r23, Y+12	; 0x0c
 150:	8d 85       	ldd	r24, Y+13	; 0x0d
 152:	9e 85       	ldd	r25, Y+14	; 0x0e
 154:	0e 94 82 01 	call	0x304	; 0x304 <__cmpsf2>
 158:	88 23       	and	r24, r24
 15a:	2c f4       	brge	.+10     	; 0x166 <main+0x6a>
		__ticks = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	98 8b       	std	Y+16, r25	; 0x10
 162:	8f 87       	std	Y+15, r24	; 0x0f
 164:	3f c0       	rjmp	.+126    	; 0x1e4 <main+0xe8>
	else if (__tmp > 65535)
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	3f ef       	ldi	r19, 0xFF	; 255
 16a:	4f e7       	ldi	r20, 0x7F	; 127
 16c:	57 e4       	ldi	r21, 0x47	; 71
 16e:	6b 85       	ldd	r22, Y+11	; 0x0b
 170:	7c 85       	ldd	r23, Y+12	; 0x0c
 172:	8d 85       	ldd	r24, Y+13	; 0x0d
 174:	9e 85       	ldd	r25, Y+14	; 0x0e
 176:	0e 94 03 02 	call	0x406	; 0x406 <__gesf2>
 17a:	18 16       	cp	r1, r24
 17c:	4c f5       	brge	.+82     	; 0x1d0 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e2       	ldi	r20, 0x20	; 32
 184:	51 e4       	ldi	r21, 0x41	; 65
 186:	6f 81       	ldd	r22, Y+7	; 0x07
 188:	78 85       	ldd	r23, Y+8	; 0x08
 18a:	89 85       	ldd	r24, Y+9	; 0x09
 18c:	9a 85       	ldd	r25, Y+10	; 0x0a
 18e:	0e 94 08 02 	call	0x410	; 0x410 <__mulsf3>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	bc 01       	movw	r22, r24
 198:	cd 01       	movw	r24, r26
 19a:	0e 94 87 01 	call	0x30e	; 0x30e <__fixunssfsi>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	98 8b       	std	Y+16, r25	; 0x10
 1a4:	8f 87       	std	Y+15, r24	; 0x0f
 1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <main+0xca>
 1a8:	80 e7       	ldi	r24, 0x70	; 112
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	9a 8b       	std	Y+18, r25	; 0x12
 1ae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	89 89       	ldd	r24, Y+17	; 0x11
 1b2:	9a 89       	ldd	r25, Y+18	; 0x12
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xb8>
 1b8:	9a 8b       	std	Y+18, r25	; 0x12
 1ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	8f 85       	ldd	r24, Y+15	; 0x0f
 1be:	98 89       	ldd	r25, Y+16	; 0x10
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	98 8b       	std	Y+16, r25	; 0x10
 1c4:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c8:	98 89       	ldd	r25, Y+16	; 0x10
 1ca:	89 2b       	or	r24, r25
 1cc:	69 f7       	brne	.-38     	; 0x1a8 <main+0xac>
 1ce:	14 c0       	rjmp	.+40     	; 0x1f8 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d0:	6b 85       	ldd	r22, Y+11	; 0x0b
 1d2:	7c 85       	ldd	r23, Y+12	; 0x0c
 1d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 1d8:	0e 94 87 01 	call	0x30e	; 0x30e <__fixunssfsi>
 1dc:	dc 01       	movw	r26, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	98 8b       	std	Y+16, r25	; 0x10
 1e2:	8f 87       	std	Y+15, r24	; 0x0f
 1e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e6:	98 89       	ldd	r25, Y+16	; 0x10
 1e8:	9c 8b       	std	Y+20, r25	; 0x14
 1ea:	8b 8b       	std	Y+19, r24	; 0x13
 1ec:	8b 89       	ldd	r24, Y+19	; 0x13
 1ee:	9c 89       	ldd	r25, Y+20	; 0x14
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xf4>
 1f4:	9c 8b       	std	Y+20, r25	; 0x14
 1f6:	8b 8b       	std	Y+19, r24	; 0x13
	
	//display_digit();
	//_delay_ms(300);
    while (1) 
    {
		for(int i = 0; i <= 9; i++){
 1f8:	1a 82       	std	Y+2, r1	; 0x02
 1fa:	19 82       	std	Y+1, r1	; 0x01
 1fc:	7d c0       	rjmp	.+250    	; 0x2f8 <__EEPROM_REGION_LENGTH__+0xf8>
			display_digit(i);
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	9a 81       	ldd	r25, Y+2	; 0x02
 202:	0e 94 56 00 	call	0xac	; 0xac <display_digit>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	aa e7       	ldi	r26, 0x7A	; 122
 20c:	b4 e4       	ldi	r27, 0x44	; 68
 20e:	8b 83       	std	Y+3, r24	; 0x03
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	ad 83       	std	Y+5, r26	; 0x05
 214:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 216:	26 e6       	ldi	r18, 0x66	; 102
 218:	36 e6       	ldi	r19, 0x66	; 102
 21a:	46 e6       	ldi	r20, 0x66	; 102
 21c:	55 e4       	ldi	r21, 0x45	; 69
 21e:	6b 81       	ldd	r22, Y+3	; 0x03
 220:	7c 81       	ldd	r23, Y+4	; 0x04
 222:	8d 81       	ldd	r24, Y+5	; 0x05
 224:	9e 81       	ldd	r25, Y+6	; 0x06
 226:	0e 94 08 02 	call	0x410	; 0x410 <__mulsf3>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	8d 8b       	std	Y+21, r24	; 0x15
 230:	9e 8b       	std	Y+22, r25	; 0x16
 232:	af 8b       	std	Y+23, r26	; 0x17
 234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	6d 89       	ldd	r22, Y+21	; 0x15
 240:	7e 89       	ldd	r23, Y+22	; 0x16
 242:	8f 89       	ldd	r24, Y+23	; 0x17
 244:	98 8d       	ldd	r25, Y+24	; 0x18
 246:	0e 94 82 01 	call	0x304	; 0x304 <__cmpsf2>
 24a:	88 23       	and	r24, r24
 24c:	2c f4       	brge	.+10     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		__ticks = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9a 8f       	std	Y+26, r25	; 0x1a
 254:	89 8f       	std	Y+25, r24	; 0x19
 256:	3f c0       	rjmp	.+126    	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
	else if (__tmp > 65535)
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	3f ef       	ldi	r19, 0xFF	; 255
 25c:	4f e7       	ldi	r20, 0x7F	; 127
 25e:	57 e4       	ldi	r21, 0x47	; 71
 260:	6d 89       	ldd	r22, Y+21	; 0x15
 262:	7e 89       	ldd	r23, Y+22	; 0x16
 264:	8f 89       	ldd	r24, Y+23	; 0x17
 266:	98 8d       	ldd	r25, Y+24	; 0x18
 268:	0e 94 03 02 	call	0x406	; 0x406 <__gesf2>
 26c:	18 16       	cp	r1, r24
 26e:	4c f5       	brge	.+82     	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e2       	ldi	r20, 0x20	; 32
 276:	51 e4       	ldi	r21, 0x41	; 65
 278:	6b 81       	ldd	r22, Y+3	; 0x03
 27a:	7c 81       	ldd	r23, Y+4	; 0x04
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	9e 81       	ldd	r25, Y+6	; 0x06
 280:	0e 94 08 02 	call	0x410	; 0x410 <__mulsf3>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	0e 94 87 01 	call	0x30e	; 0x30e <__fixunssfsi>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	9a 8f       	std	Y+26, r25	; 0x1a
 296:	89 8f       	std	Y+25, r24	; 0x19
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
 29a:	80 e7       	ldi	r24, 0x70	; 112
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9c 8f       	std	Y+28, r25	; 0x1c
 2a0:	8b 8f       	std	Y+27, r24	; 0x1b
 2a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 2aa:	9c 8f       	std	Y+28, r25	; 0x1c
 2ac:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ae:	89 8d       	ldd	r24, Y+25	; 0x19
 2b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	9a 8f       	std	Y+26, r25	; 0x1a
 2b6:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b8:	89 8d       	ldd	r24, Y+25	; 0x19
 2ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2bc:	89 2b       	or	r24, r25
 2be:	69 f7       	brne	.-38     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 2c0:	14 c0       	rjmp	.+40     	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2c2:	6d 89       	ldd	r22, Y+21	; 0x15
 2c4:	7e 89       	ldd	r23, Y+22	; 0x16
 2c6:	8f 89       	ldd	r24, Y+23	; 0x17
 2c8:	98 8d       	ldd	r25, Y+24	; 0x18
 2ca:	0e 94 87 01 	call	0x30e	; 0x30e <__fixunssfsi>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	9a 8f       	std	Y+26, r25	; 0x1a
 2d4:	89 8f       	std	Y+25, r24	; 0x19
 2d6:	89 8d       	ldd	r24, Y+25	; 0x19
 2d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2da:	9e 8f       	std	Y+30, r25	; 0x1e
 2dc:	8d 8f       	std	Y+29, r24	; 0x1d
 2de:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
 2e6:	9e 8f       	std	Y+30, r25	; 0x1e
 2e8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			clear_digit();
 2ea:	0e 94 72 00 	call	0xe4	; 0xe4 <clear_digit>
	
	//display_digit();
	//_delay_ms(300);
    while (1) 
    {
		for(int i = 0; i <= 9; i++){
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	0a 97       	sbiw	r24, 0x0a	; 10
 2fe:	0c f4       	brge	.+2      	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
 300:	7e cf       	rjmp	.-260    	; 0x1fe <main+0x102>
			display_digit(i);
			_delay_ms(1000);
			clear_digit();
		}
    }
 302:	7a cf       	rjmp	.-268    	; 0x1f8 <main+0xfc>

00000304 <__cmpsf2>:
 304:	0e 94 b6 01 	call	0x36c	; 0x36c <__fp_cmp>
 308:	08 f4       	brcc	.+2      	; 0x30c <__cmpsf2+0x8>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret

0000030e <__fixunssfsi>:
 30e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fp_splitA>
 312:	88 f0       	brcs	.+34     	; 0x336 <__fixunssfsi+0x28>
 314:	9f 57       	subi	r25, 0x7F	; 127
 316:	98 f0       	brcs	.+38     	; 0x33e <__fixunssfsi+0x30>
 318:	b9 2f       	mov	r27, r25
 31a:	99 27       	eor	r25, r25
 31c:	b7 51       	subi	r27, 0x17	; 23
 31e:	b0 f0       	brcs	.+44     	; 0x34c <__fixunssfsi+0x3e>
 320:	e1 f0       	breq	.+56     	; 0x35a <__fixunssfsi+0x4c>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	1a f0       	brmi	.+6      	; 0x332 <__fixunssfsi+0x24>
 32c:	ba 95       	dec	r27
 32e:	c9 f7       	brne	.-14     	; 0x322 <__fixunssfsi+0x14>
 330:	14 c0       	rjmp	.+40     	; 0x35a <__fixunssfsi+0x4c>
 332:	b1 30       	cpi	r27, 0x01	; 1
 334:	91 f0       	breq	.+36     	; 0x35a <__fixunssfsi+0x4c>
 336:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fp_zero>
 33a:	b1 e0       	ldi	r27, 0x01	; 1
 33c:	08 95       	ret
 33e:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_zero>
 342:	67 2f       	mov	r22, r23
 344:	78 2f       	mov	r23, r24
 346:	88 27       	eor	r24, r24
 348:	b8 5f       	subi	r27, 0xF8	; 248
 34a:	39 f0       	breq	.+14     	; 0x35a <__fixunssfsi+0x4c>
 34c:	b9 3f       	cpi	r27, 0xF9	; 249
 34e:	cc f3       	brlt	.-14     	; 0x342 <__fixunssfsi+0x34>
 350:	86 95       	lsr	r24
 352:	77 95       	ror	r23
 354:	67 95       	ror	r22
 356:	b3 95       	inc	r27
 358:	d9 f7       	brne	.-10     	; 0x350 <__fixunssfsi+0x42>
 35a:	3e f4       	brtc	.+14     	; 0x36a <__fixunssfsi+0x5c>
 35c:	90 95       	com	r25
 35e:	80 95       	com	r24
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	8f 4f       	sbci	r24, 0xFF	; 255
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	08 95       	ret

0000036c <__fp_cmp>:
 36c:	99 0f       	add	r25, r25
 36e:	00 08       	sbc	r0, r0
 370:	55 0f       	add	r21, r21
 372:	aa 0b       	sbc	r26, r26
 374:	e0 e8       	ldi	r30, 0x80	; 128
 376:	fe ef       	ldi	r31, 0xFE	; 254
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	e8 07       	cpc	r30, r24
 37e:	f9 07       	cpc	r31, r25
 380:	c0 f0       	brcs	.+48     	; 0x3b2 <__fp_cmp+0x46>
 382:	12 16       	cp	r1, r18
 384:	13 06       	cpc	r1, r19
 386:	e4 07       	cpc	r30, r20
 388:	f5 07       	cpc	r31, r21
 38a:	98 f0       	brcs	.+38     	; 0x3b2 <__fp_cmp+0x46>
 38c:	62 1b       	sub	r22, r18
 38e:	73 0b       	sbc	r23, r19
 390:	84 0b       	sbc	r24, r20
 392:	95 0b       	sbc	r25, r21
 394:	39 f4       	brne	.+14     	; 0x3a4 <__fp_cmp+0x38>
 396:	0a 26       	eor	r0, r26
 398:	61 f0       	breq	.+24     	; 0x3b2 <__fp_cmp+0x46>
 39a:	23 2b       	or	r18, r19
 39c:	24 2b       	or	r18, r20
 39e:	25 2b       	or	r18, r21
 3a0:	21 f4       	brne	.+8      	; 0x3aa <__fp_cmp+0x3e>
 3a2:	08 95       	ret
 3a4:	0a 26       	eor	r0, r26
 3a6:	09 f4       	brne	.+2      	; 0x3aa <__fp_cmp+0x3e>
 3a8:	a1 40       	sbci	r26, 0x01	; 1
 3aa:	a6 95       	lsr	r26
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	81 1d       	adc	r24, r1
 3b0:	81 1d       	adc	r24, r1
 3b2:	08 95       	ret

000003b4 <__fp_split3>:
 3b4:	57 fd       	sbrc	r21, 7
 3b6:	90 58       	subi	r25, 0x80	; 128
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <__fp_splitA+0x10>
 3be:	5f 3f       	cpi	r21, 0xFF	; 255
 3c0:	71 f0       	breq	.+28     	; 0x3de <__fp_splitA+0x1a>
 3c2:	47 95       	ror	r20

000003c4 <__fp_splitA>:
 3c4:	88 0f       	add	r24, r24
 3c6:	97 fb       	bst	r25, 7
 3c8:	99 1f       	adc	r25, r25
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <__fp_splitA+0x20>
 3cc:	9f 3f       	cpi	r25, 0xFF	; 255
 3ce:	79 f0       	breq	.+30     	; 0x3ee <__fp_splitA+0x2a>
 3d0:	87 95       	ror	r24
 3d2:	08 95       	ret
 3d4:	12 16       	cp	r1, r18
 3d6:	13 06       	cpc	r1, r19
 3d8:	14 06       	cpc	r1, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	f2 cf       	rjmp	.-28     	; 0x3c2 <__fp_split3+0xe>
 3de:	46 95       	lsr	r20
 3e0:	f1 df       	rcall	.-30     	; 0x3c4 <__fp_splitA>
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <__fp_splitA+0x30>
 3e4:	16 16       	cp	r1, r22
 3e6:	17 06       	cpc	r1, r23
 3e8:	18 06       	cpc	r1, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	f1 cf       	rjmp	.-30     	; 0x3d0 <__fp_splitA+0xc>
 3ee:	86 95       	lsr	r24
 3f0:	71 05       	cpc	r23, r1
 3f2:	61 05       	cpc	r22, r1
 3f4:	08 94       	sec
 3f6:	08 95       	ret

000003f8 <__fp_zero>:
 3f8:	e8 94       	clt

000003fa <__fp_szero>:
 3fa:	bb 27       	eor	r27, r27
 3fc:	66 27       	eor	r22, r22
 3fe:	77 27       	eor	r23, r23
 400:	cb 01       	movw	r24, r22
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret

00000406 <__gesf2>:
 406:	0e 94 b6 01 	call	0x36c	; 0x36c <__fp_cmp>
 40a:	08 f4       	brcc	.+2      	; 0x40e <__gesf2+0x8>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__mulsf3>:
 410:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3x>
 414:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_round>
 418:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_pscA>
 41c:	38 f0       	brcs	.+14     	; 0x42c <__mulsf3+0x1c>
 41e:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_pscB>
 422:	20 f0       	brcs	.+8      	; 0x42c <__mulsf3+0x1c>
 424:	95 23       	and	r25, r21
 426:	11 f0       	breq	.+4      	; 0x42c <__mulsf3+0x1c>
 428:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_inf>
 42c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__fp_nan>
 430:	11 24       	eor	r1, r1
 432:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>

00000436 <__mulsf3x>:
 436:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__fp_split3>
 43a:	70 f3       	brcs	.-36     	; 0x418 <__mulsf3+0x8>

0000043c <__mulsf3_pse>:
 43c:	95 9f       	mul	r25, r21
 43e:	c1 f3       	breq	.-16     	; 0x430 <__mulsf3+0x20>
 440:	95 0f       	add	r25, r21
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	55 1f       	adc	r21, r21
 446:	62 9f       	mul	r22, r18
 448:	f0 01       	movw	r30, r0
 44a:	72 9f       	mul	r23, r18
 44c:	bb 27       	eor	r27, r27
 44e:	f0 0d       	add	r31, r0
 450:	b1 1d       	adc	r27, r1
 452:	63 9f       	mul	r22, r19
 454:	aa 27       	eor	r26, r26
 456:	f0 0d       	add	r31, r0
 458:	b1 1d       	adc	r27, r1
 45a:	aa 1f       	adc	r26, r26
 45c:	64 9f       	mul	r22, r20
 45e:	66 27       	eor	r22, r22
 460:	b0 0d       	add	r27, r0
 462:	a1 1d       	adc	r26, r1
 464:	66 1f       	adc	r22, r22
 466:	82 9f       	mul	r24, r18
 468:	22 27       	eor	r18, r18
 46a:	b0 0d       	add	r27, r0
 46c:	a1 1d       	adc	r26, r1
 46e:	62 1f       	adc	r22, r18
 470:	73 9f       	mul	r23, r19
 472:	b0 0d       	add	r27, r0
 474:	a1 1d       	adc	r26, r1
 476:	62 1f       	adc	r22, r18
 478:	83 9f       	mul	r24, r19
 47a:	a0 0d       	add	r26, r0
 47c:	61 1d       	adc	r22, r1
 47e:	22 1f       	adc	r18, r18
 480:	74 9f       	mul	r23, r20
 482:	33 27       	eor	r19, r19
 484:	a0 0d       	add	r26, r0
 486:	61 1d       	adc	r22, r1
 488:	23 1f       	adc	r18, r19
 48a:	84 9f       	mul	r24, r20
 48c:	60 0d       	add	r22, r0
 48e:	21 1d       	adc	r18, r1
 490:	82 2f       	mov	r24, r18
 492:	76 2f       	mov	r23, r22
 494:	6a 2f       	mov	r22, r26
 496:	11 24       	eor	r1, r1
 498:	9f 57       	subi	r25, 0x7F	; 127
 49a:	50 40       	sbci	r21, 0x00	; 0
 49c:	9a f0       	brmi	.+38     	; 0x4c4 <__stack+0x65>
 49e:	f1 f0       	breq	.+60     	; 0x4dc <__stack+0x7d>
 4a0:	88 23       	and	r24, r24
 4a2:	4a f0       	brmi	.+18     	; 0x4b6 <__stack+0x57>
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	bb 1f       	adc	r27, r27
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	50 40       	sbci	r21, 0x00	; 0
 4b4:	a9 f7       	brne	.-22     	; 0x4a0 <__stack+0x41>
 4b6:	9e 3f       	cpi	r25, 0xFE	; 254
 4b8:	51 05       	cpc	r21, r1
 4ba:	80 f0       	brcs	.+32     	; 0x4dc <__stack+0x7d>
 4bc:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_inf>
 4c0:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	e4 f3       	brlt	.-8      	; 0x4c0 <__stack+0x61>
 4c8:	98 3e       	cpi	r25, 0xE8	; 232
 4ca:	d4 f3       	brlt	.-12     	; 0x4c0 <__stack+0x61>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	e7 95       	ror	r30
 4d8:	9f 5f       	subi	r25, 0xFF	; 255
 4da:	c1 f7       	brne	.-16     	; 0x4cc <__stack+0x6d>
 4dc:	fe 2b       	or	r31, r30
 4de:	88 0f       	add	r24, r24
 4e0:	91 1d       	adc	r25, r1
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret

000004ea <__fp_inf>:
 4ea:	97 f9       	bld	r25, 7
 4ec:	9f 67       	ori	r25, 0x7F	; 127
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <__fp_nan>:
 4f6:	9f ef       	ldi	r25, 0xFF	; 255
 4f8:	80 ec       	ldi	r24, 0xC0	; 192
 4fa:	08 95       	ret

000004fc <__fp_pscA>:
 4fc:	00 24       	eor	r0, r0
 4fe:	0a 94       	dec	r0
 500:	16 16       	cp	r1, r22
 502:	17 06       	cpc	r1, r23
 504:	18 06       	cpc	r1, r24
 506:	09 06       	cpc	r0, r25
 508:	08 95       	ret

0000050a <__fp_pscB>:
 50a:	00 24       	eor	r0, r0
 50c:	0a 94       	dec	r0
 50e:	12 16       	cp	r1, r18
 510:	13 06       	cpc	r1, r19
 512:	14 06       	cpc	r1, r20
 514:	05 06       	cpc	r0, r21
 516:	08 95       	ret

00000518 <__fp_round>:
 518:	09 2e       	mov	r0, r25
 51a:	03 94       	inc	r0
 51c:	00 0c       	add	r0, r0
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0xc>
 520:	88 23       	and	r24, r24
 522:	52 f0       	brmi	.+20     	; 0x538 <__fp_round+0x20>
 524:	bb 0f       	add	r27, r27
 526:	40 f4       	brcc	.+16     	; 0x538 <__fp_round+0x20>
 528:	bf 2b       	or	r27, r31
 52a:	11 f4       	brne	.+4      	; 0x530 <__fp_round+0x18>
 52c:	60 ff       	sbrs	r22, 0
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__fp_round+0x20>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <_exit>:
 53a:	f8 94       	cli

0000053c <__stop_program>:
 53c:	ff cf       	rjmp	.-2      	; 0x53c <__stop_program>
